package uk.ac.cf.nsa.team2.deskbookingapp.utils;

/**
 * @description:
 * @author: yiting zheng
 * @time: 2021/11/28
 */
public class Snowflake {
    /**
     * timestamp
     */
    private final long twepoch = 1420041600000L;

    /**
     * Number of digits occupied by machine ID
     */
    private final long workerIdBits = 5L;

    /**
     * Number of bits occupied by data ID
     */
    private final long datacenterIdBits = 5L;

    /**
     * The maximum machine ID supported is 31
     */
    private final long maxWorkerId = -1L ^ (-1L << workerIdBits);

    /**
     * Maximum supported data ID
     */
    private final long maxDatacenterId = -1L ^ (-1L << datacenterIdBits);

    /**
     * The number of bits the sequence occupies in the ID
     */
    private final long sequenceBits = 12L;

    /**
     * The machine ID shifts 12 bits to the left
     */
    private final long workerIdShift = sequenceBits;

    /**
     * The data ID shifts 17 bits to the left
     */
    private final long datacenterIdShift = sequenceBits + workerIdBits;

    /**
     * The timestamp shifts 22 bits to the left
     */
    private final long timestampLeftShift = sequenceBits + workerIdBits + datacenterIdBits;

    private final long sequenceMask = -1L ^ (-1L << sequenceBits);

    /**
     * Work machine ID
     */
    private long workerId;

    /**
     * Data center ID
     */
    private long datacenterId;

    /**
     * Sequence in milliseconds (0 ~ 4095)
     */
    private long sequence = 0L;

    /**
     * Last generated ID
     */
    private long lastTimestamp = -1L;

    /**
     * @param workerId     (0~31)
     * @param datacenterId (0~31)
     */
    public Snowflake(long workerId, long datacenterId) {
        if (workerId > maxWorkerId || workerId < 0) {
            throw new IllegalArgumentException(String.format("worker Id can't be greater than %d or less than 0", maxWorkerId));
        }
        if (datacenterId > maxDatacenterId || datacenterId < 0) {
            throw new IllegalArgumentException(String.format("datacenter Id can't be greater than %d or less than 0", maxDatacenterId));
        }
        this.workerId = workerId;
        this.datacenterId = datacenterId;
    }

    // ==============================Methods==========================================

    /**
     * Get next ID
     *
     * @return SnowflakeId
     */
    public synchronized long nextId() {
        long timestamp = timeGen();

        //If the current time is less than the timestamp generated by the last ID, it indicates that the system clock has fallback, and an exception should be thrown at this time
        if (timestamp < lastTimestamp) {
            throw new RuntimeException(
                    String.format("Clock moved backwards.  Refusing to generate id for %d milliseconds", lastTimestamp - timestamp));
        }

        //If it is generated at the same time, the sequence within milliseconds is performed
        if (lastTimestamp == timestamp) {
            sequence = (sequence + 1) & sequenceMask;
            if (sequence == 0) {
                // Block to the next millisecond and get a new timestamp
                timestamp = tilNextMillis(lastTimestamp);
            }
        }
        // Timestamp change, sequence reset in milliseconds
        else {
            sequence = 0L;
        }

        // Last generated ID
        lastTimestamp = timestamp;

        // Shift and put together by or operation to form a 64 bit ID
        return ((timestamp - twepoch) << timestampLeftShift) //
                | (datacenterId << datacenterIdShift) //
                | (workerId << workerIdShift) //
                | sequence;
    }

    /**
     * Block to the next millisecond until a new timestamp is obtained
     *
     * @param lastTimestamp
     * @return not timestamp
     */
    protected long tilNextMillis(long lastTimestamp) {
        long timestamp = timeGen();
        while (timestamp <= lastTimestamp) {
            timestamp = timeGen();
        }
        return timestamp;
    }

    /**
     * Returns the current time in milliseconds
     *
     * @return current time
     */
    protected long timeGen() {
        return System.currentTimeMillis();
    }
}
